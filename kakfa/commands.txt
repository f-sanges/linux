Basic KAFKA Commands

START ZOOKEEPER
bin/zookeeper-server-start.sh config/zookeeper.properties

START KAFKA BROKER
bin/kafka-server-start.sh config/server.properties

CREATE TOPIC
bin/kafka-topics.sh \
--bootstrap-server localhost:9092 \
--create \
--replication-factor 1 \
--partitions 3 \
--topic test

LIST TOPICS
bin/kafka-topics.sh \
--bootstrap-server localhost:9092 \
--list

TOPIC DETAILS
bin/kafka-topics.sh \
--bootstrap-server localhost:9092 \
--describe \
--topic test								//if u don't specify topic, it will be executed on all the topics
--under-replicated-partitions				//under-replicated-partitions
--unavailable-partitions					//unavailable-partitions

START CONSOLE PRODUCER
bin/kafka-console-producer.sh \
--broker-list localhost:9092 \
--topic test

START CONSOLE CONSUMER
bin/kafka-console-consumer.sh \
--bootstrap-server localhost:9092 \
--topic test

START CONSOLE CONSUMER AND READ MESSAGES FROM BEGINNING
bin/kafka-console-consumer.sh \
--bootstrap-server localhost:9092 \
--topic test \
--from-beginning
--partition NUM_PARTITION -> specify partition
--offset NUM_OFFSET -> specify offset(only if partition is specified)

START CONSOLE CONSUMER WITH SPECIFIC CONSUMER GROUP
bin/kafka-console-consumer.sh \
--bootstrap-server localhost:9092 \
--topic test \
--group test \
--from-beginning

LIST CONSUMER GROUPS
bin/kafka-consumer-groups.sh \
--bootstrap-server localhost:9092 \
--list

CONSUMER GROUP DETAILS
bin/kafka-consumer-groups.sh \
--bootstrap-server localhost:9092 \
--group test \
--describe

ZOOKEEPER SEE ACTIVE BROKERS
bin/zookeeper-shell.sh localhost:2181 ls /brokers/ids
EXAMPLE with 2 active brokers:
[kafka@centos7 bin]$ zookeeper-shell.sh localhost:2181 ls /brokers/ids
...
Connecting to localhost:2181
WATCHER::
WatchedEvent state:SyncConnected type:None path:null
[0, 2]		<-- Brokers' ID


GET INFORMATION FROM ZOOKEEPER ABOUT SPECIFIC BROKER BY ID
bin/zookeeper-shell.sh localhost:2181 get /brokers/ids/0
EXAMPLE:
[kafka@centos7 ~]$ zookeeper-shell.sh localhost:2181 get /brokers/ids/0
[...]
WATCHER::
WatchedEvent state:SyncConnected type:None path:null
{"listener_security_protocol_map":{"PLAINTEXT":"PLAINTEXT"},"endpoints":["PLAINTEXT://192.168.252.100:9092"],"jmx_port":-1,"host":"192.168.252.100","timestamp":"1587660256867","port":9092,"version":4}
cZxid = 0x43e
ctime = Thu Apr 23 18:44:16 CEST 2020
mZxid = 0x43e
mtime = Thu Apr 23 18:44:16 CEST 2020
pZxid = 0x43e
cversion = 0
dataVersion = 1
aclVersion = 0
ephemeralOwner = 0x100000bfcd70001
dataLength = 200
numChildren = 0


GET INFORMATION FROM ZOOKEEPER ABOUT TOPICS
ls /brokers/topics #Gives the list of topics
EXAMPLE:
[...]
WATCHER::
WatchedEvent state:SyncConnected type:None path:null
[kafkatest, rep2_part1, __consumer_offsets, rep1_part1]


PRODUCER PERFORMANCE TEST
bin/kafka-producer-perf-test.sh \
--topic perf2 \
--num-records 1000 \
--throughput 10 \
--record-size 1000 \
--producer-props \
bootstrap.servers=localhost:9092


CONSUMER PERFORMANCE TEST
bin/kafka-consumer-perf-test.sh \
--broker-list localhost:9092 \
--topic perf \
--messages 1000000


CHECK VERSION CONFLUENT KAFKA
KAFKA VERSION:
kafka-topics --version
	-> ex output: 2.1.1-cp3 (Commit:b6527ae5f11f985f)
find /usr/share/java/kafka -name \*kafka_\* | head -1 | grep -o '\kafka[^\n]*'	
	-> ex output: kafka/kafka_2.11-2.1.1-cp3-scaladoc.jar where 2.11 is Scala version and 2.1.1 is Kafka Version
CONFLUENT RPM INSTALLED :
rpm -qa| grep confluent


