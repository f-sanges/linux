ctrl + alt + t 										-> open a terminal

apt-cache search something							-> search inside the package manager
														e.g.: apt-cache search gimp*		

dpkg -i file.deb									-> to install debian file

apt-get update										-> upgrade di tutti i pacchetti

grep qualcosa file1 file2							-> grep può effettuare la ricerca su + files
grep -n												-> oltre ai risultati visualizza il num di riga
grep ^letter										-> find all the occurrences starting with letter

find . -size +1m									-> search files with size > 1MB
find . -not -iname "*.txt"							-> not in find
find . -maxdepth 1 -iname "*.txt"					-> maxdepth 1 find only in that folder (depth 1)
find -exec 											-> -exec command {} +
															   This variant of the -exec action runs the specified command on the selected files, but the command
															   line is built by appending each selected file name at the end; the total number of invocations  of
															   the command will be much less than the number of matched files.  The command line is built in much
															   the same way that xargs builds its command lines.  Only one instance of `{}' is allowed within the
															   command.  The command is executed in the starting directory.
															    e.g.: 	find. -iname "*.txt" -exec grep -i something {} \;
														e.g.: find / -name "*.old" -exec /bin/rm {} \;  find file with old extensions and delete them
find . -iname "*.txt" | tee file.txt				-> redirect a file e a schermo
find ! -user USER_NAME								-> find in the current directory all the files not owned by USER_NAME

pgrep -u root ssh			-> will only list the processes that are called sshd and are owned by root.

sudo systemctl start elasticsearch   	-			> simile a :
														sudo servive elasticsearch start (NB cambia l'ordine dei comandi)


crontab -e											-> qui puoi specificare un task con sintassi:  m h  dom mon dow   command
														minute (m), hour (h), day of month (dom), month (mon), and day of week (dow)
														NB: è per l'utente; per root esegui: sudo crontab -e




sudo tcpdump -i wl01 -A port 22						-> tcpdump su interfaccia wl01 e porta 22 -A in ASCII

nmap IP												-> dice i servizi attivi

/etc/ssh/sshd_config								-> tutte le config per ssh (es porta, puoi consentire accesso solo a determinati user con AllowUsers




unset <var-name>							-> Unset di una variabile settata ad esempio con export


shift up/down								-> Move up/down the output after a cmd like cat


ls -lR										-> Recursive ls
ls -r										-> r reverese order
ls -i										-> list file's inode index number
												NOTE: if i create a soft link to a file, they will have two differents inode
												if i create a hard link to a file, they will have the same inode
ls -F										-> shows the type of a file (/ is a directory, @ a link, * an executable
ls -S										-> sort by file size
ls -lt										-> sort by time & date


sort filename								-> sort the content of the filename (Note: does not change the file)
				-o fileoutput					-o to specify an output file	
				-n 								sort a file numerically
				-k number						sort on the basis of any column
				-u 								sort without considering duplicates

{} brackets for globbing
ex1: echo {1..3}.log  -> 1.log 2.log 3.log
ex2: echo {a..c}.log  -> a.log b.log c.log
ex3: echo {a1,a2}.log -> a1.log a2.log


info										-> informations about Linux commands

vi											-> Ctrl+R  = ReDo
											   ESC + U = UnDo
											   Pressing V = Visual line selection, v = visual selection (move with arrows)
											   Copy(Yank)/Paste is done with Y/P
											   
Copy / paste in terminal					-> Ctrl+Shift+c / Ctrl+Shift+v

/var/log/auth.log or /var/log/secure:		-> Keep authentication logs for both successful or failed logins, and authentication processes. Storage depends on system type. 
											   For Debian/Ubuntu, look in /var/log/auth.log. For Redhat/CentrOS, go to /var/log/secure
											   
											   
kill -l										-> show all the signals that can be sended to a process

lscpu										-> show information about cpu
nproc										-> show numbers of proc			

uptime										-> Example: 12:13:58 up 5 days,  1:23,  0 users,  load average: 0.00, 0.00, 0.00  = avg load of the last 1,5,15 min (depends on num cpu)
						
locate -i NOME_FILE							-> locate (-i not case sensitive)	

alias										-> Ex: alias ping="ping -c3"
unalias											   unalias ping			

printenv									-> Print environment variables	

date -d@TIMESTAMP							-> Convert timestamps (s) in date:
												date -d@1595038139 = Sat Jul 18 04:08:59     2020
												
echo $SHELL or echo $0						-> show the shell type

uname -a									-> show information of Linux
uname -r									-> show information about the kernel

uptime	(-p)								-> returns information about how long your system has been running together with the current time, 
												number of users with running sessions, and the system load averages for the past 1, 5, and 15 minutes.
												-p pretty format
												
w											-> shows which user is connected

adduser username							-> add a user interactively
deluser username							-> delete a user
useradd username							-> add a user
					-m							create the home directory
					-e 							set an expiration date e.g.: sudo useradd -e 2019-01-22 username
userdel username -r							-> remove a user (-r remove also the home dir)

su user										-> swithc to user
												The most commonly used option when invoking su is - (-l, --login). This makes the shell a login shell with an environment very similar to a real login and changes the current directory