On CentOS START DAEMON and STATUS DOCKER:

sudo service docker start 
or
sudo systemctl start docker

another way to start:
sudo dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375				-> dockerd is the server daemon



check status (example):
[docker@centos7 ~]$ systemctl status docker
● docker.service - Docker Application Container Engine
   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)
   Active: active (running) since mer 2020-10-21 19:17:45 CEST; 12min ago
     Docs: https://docs.docker.com
 Main PID: 11893 (dockerd)
    Tasks: 11
   Memory: 146.3M
   CGroup: /system.slice/docker.service
           └─11893 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock

ott 21 19:17:45 centos7 dockerd[11893]: time="2020-10-21T19:17:45.185146502+02:00" level=info msg="ccResolverWrapper: sending update to cc: {[{unix:///run/containerd/con... module=grpc
ott 21 19:17:45 centos7 dockerd[11893]: time="2020-10-21T19:17:45.185154002+02:00" level=info msg="ClientConn switching balancer to \"pick_first\"" module=grpc
ott 21 19:17:45 centos7 dockerd[11893]: time="2020-10-21T19:17:45.216095559+02:00" level=info msg="[graphdriver] using prior storage driver: overlay2"
ott 21 19:17:45 centos7 dockerd[11893]: time="2020-10-21T19:17:45.283135898+02:00" level=info msg="Loading containers: start."
ott 21 19:17:45 centos7 dockerd[11893]: time="2020-10-21T19:17:45.614898080+02:00" level=info msg="Default bridge (docker0) is assigned with an IP address 172.17.0.0/16.... IP address"
ott 21 19:17:45 centos7 dockerd[11893]: time="2020-10-21T19:17:45.658035543+02:00" level=info msg="Loading containers: done."
ott 21 19:17:45 centos7 dockerd[11893]: time="2020-10-21T19:17:45.714703960+02:00" level=info msg="Docker daemon" commit=4484c46d9d graphdriver(s)=overlay2 version=19.03.13
ott 21 19:17:45 centos7 dockerd[11893]: time="2020-10-21T19:17:45.714919761+02:00" level=info msg="Daemon has completed initialization"
ott 21 19:17:45 centos7 dockerd[11893]: time="2020-10-21T19:17:45.742706433+02:00" level=info msg="API listen on /var/run/docker.sock"
ott 21 19:17:45 centos7 systemd[1]: Started Docker Application Container Engine.
Hint: Some lines were ellipsized, use -l to show in full.




EXPOSE PORT MODIFYING hostconfig.json (PAY ATTENTION!!!!)
Go to /var/lib/docker/containers/ID_CONTAINER for example:
/var/lib/docker/containers/5b477a6ba0346e11740e829d5e195c41505e98e4cab8d2a2dcae7953b78da328
backup of hostconfig.json
modify "PortBindings":{},
to (example)
"PortBindings":{"5432/tcp":[{"HostIp":"","HostPort":"5432"}]},
Restart DOcker daemon (important otherwise the daemon will replace the file once u stop/start the container)
Check:
5b477a6ba034        postgres                       "docker-entrypoint.s…"   2 days ago          Up 3 seconds                0.0.0.0:5432->5432/tcp   great_lumiere




docker info																		-> Display system-wide information

sudo service docker status

docker logs -ft <CONTAINER-ID>													-> show logs (-t timestamps, -f follows)
--tail <NUMBER>																		show last NUMBER rows

docker exec -it <CONTAINER-ID> bash												-> Note: The container must be started. Execute bash shell 

docker rm $(docker ps -a -q)													-> Remove all containers
docker rmi $(docker images -q)													-> Remove all images

docker run -itd --name my-http-container-2 -p 5556:80 my-httpd:latest			-> ex of docker run specifing ports (-P to assign ports randomly)
																					it creates a new virtual network
																					see command: ip a
																					note in the following output "master docker 0"
																					27: vethe11d1ae@if26: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default
																					link/ether 36:5c:0d:46:e0:f9 brd ff:ff:ff:ff:ff:ff link-netnsid 1
																					inet6 fe80::345c:dff:fe46:e0f9/64 scope link
																					   valid_lft forever preferred_lft forever


docker login																	-> to connect to DockerHub

docker tag <currentimage>:<tag> <repository-name>/<image-name>:<tag>			-> tag an image
	ex: docker tag my-nginx:latest fsanges/nginx:1.0

docker push <repository-name>/<image-name>:<tag>								-> after the creation of the repository on DockerHub, push the image to it; 
ex: docker push fsanges/nginx:1.0												   the name has to be the same

docker commit <container-id> <repository-name>/<image-name>:<tag>				-> commit  a container's file changes or settings into a new image

docker pull <repository-name>/<image-name>:<tag>

docker history [OPTIONS] IMAGE													-> Show the history of an image

docker image prune																-> By default, docker image prune only cleans up dangling images. 
																					A dangling image is one that is not tagged and is not referenced by any container

docker container prune															-> Remove all stopped containers.
																					WARNING! This will remove all stopped containers.
																					Are you sure you want to continue? [y/N] N


-v option in docker cmd															-> Example (-w = working directory)
																					docker run -v $(pwd):/app python python3 /app/hello-python.py equivalent to
																					docker run -v $(pwd):/app -w /app python python3 hello-python.py
																					You can specify read only with ":ro" for example $(pwd):/app:ro
Hello Python


docker network ls																-> show docker networks
																					Example:
																					NETWORK ID          NAME                               DRIVER              SCOPE
																					4d6c9017f731        bridge                             bridge              local
																					30611446310e        host                               host                local
																					5574f983a7a1        none                               null                local
docker network inspect <network>												-> Example: 
																					docker network inspect bridge
																					[
																						{
																							"Name": "bridge",
																							"Id": "4d6c9017f73138dedb97d1fb0e77f2455083cdd34470adfd2be989fcf5578362",
																							"Created": "2021-01-26T17:24:29.641794642+01:00",
																							"Scope": "local",
																							"Driver": "bridge",
																							"EnableIPv6": false,
																							"IPAM": {
																								"Driver": "default",
																								"Options": null,
																								"Config": [
																									{
																										"Subnet": "172.17.0.0/16",			# Subnet
																										"Gateway": "172.17.0.1"
																									}
																								]
																							},
																							"Internal": false,
																							"Attachable": false,
																							"Ingress": false,
																							"ConfigFrom": {
																								"Network": ""
																							},
																							"ConfigOnly": false,
																							"Containers": {},			# If there are containers running you will see its details
																							"Options": {
																								"com.docker.network.bridge.default_bridge": "true",
																								"com.docker.network.bridge.enable_icc": "true",
																								"com.docker.network.bridge.enable_ip_masquerade": "true",
																								"com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
																								"com.docker.network.bridge.name": "docker0",
																								"com.docker.network.driver.mtu": "1500"
																							},
																							"Labels": {}
																						}
																					]
docker network create <network_name>											-> Create a network
																					You can specify for example --driver=bridge
																												--subnet=192.168.2./24
																												--gateway=192.168.2.10
																									
docker network rm <network>														-> Remove a network
docker run --network <network> <image>											-> --network to specify a network
																					Note: if you specify a network it is possible to use hostname to address a container
																					if you specify --network host the container’s network stack is not isolated from the Docker host (the container shares the host’s networking namespace)
docker network prune															-> Remove all unused network
																					
			
			
docker attach <CONTAINER>														-> Attach local standard input, output, and error streams to a running container


docker volume create --name my-vol												-> create a volume specifing the name
docker volume ls																-> list volumes
docker volume prune																-> delete all unused volumes

docker rename CONTAINER NEW_NAME												-> rename a container

