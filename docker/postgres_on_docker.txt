PULL POSTGRES IMAGE
docker pull postgres

CHECK IMAGE
docker image ls
[docker@centos7 ~]$ docker image ls
REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE
postgres                       latest              c96f8b6bc0d9        8 days ago          314MB



$ docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres
The default postgres user and database are created in the entrypoint with initdb.

The postgres database is a default database meant for use by users, utilities and third party applications.

postgresql.org/docs



If there is the following error:
WARNING: IPv4 forwarding is disabled. Networking will not work.
do:
	check sysctl net.ipv4.ip_forward
	net.ipv4.ip_forward = 0		(in my case it was not set)
	add net.ipv4.ip_forward=1 in /etc/sysctl.conf



DOCKER RUN
docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres


DOCKER START
docker ps -add	-> take the id of postgres container
docker start id_container_postgres


ENTER THE CONTAINER:
docker exec -it id_container_postgres bash



CHANGE USER:
su - postgres



ACCESS TO PSQL:
psql




CHECK POSTGRES VERSION (Example):
postgres=# select version();
                                                     version                                                      
------------------------------------------------------------------------------------------------------------------
 PostgreSQL 13.0 (Debian 13.0-1.pgdg100+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 8.3.0-6) 8.3.0, 64-bit
(1 row)





LIST DATABASE:
\l


CREATE DATABASE:
CREATE DATABASE prova;




SWITCH TO A DB
switching to a database
\c dbname


EXIT DB
exit database
\q


DROP DATABASE
drop database
DROP DATABASE dbname;
Cannot drop a database that has any open connections, including our own connection. Switch to a different database, then drop the one to which youâ€™re no longer connected.


USE CLI COMMANDS
use regular CLI commands
\! <command> for example: \! pwd

CREATE TABLES (example)
CREATE TABLE COMPANY(
	ID INT PRIMARY KEY NOT NULL,
	NAME TEXT NOT NULL,
	AGE INT NOT NULL,
	ADDRESS CHAR(50),
	SALARY REAL
	);
	

INSERT RECORDS
INSERT INTO tablename (column1, column2, column3,...columnN) VALUES (value1, value2, value3,...valueN), (...);
example:
INSERT INTO company VALUES (1, 'Francesco', 38)				#NB single quotes

CREATE TABLE and INSERT (Example)
prova=# \d customers
                                    Table "public.customers"
 Column |         Type          | Collation | Nullable |                Default
--------+-----------------------+-----------+----------+----------------------------------------
 cid    | integer               |           | not null | nextval('customers_cid_seq'::regclass)
 cname  | character varying(50) |           |          |
 cemail | character varying(50) |           |          |
Indexes:
    "customers_pkey" PRIMARY KEY, btree (cid)

prova=# INSERT INTO customers (cname, cemail) VALUES ('Francesco Sanges', 'francesco.sanges@gmail.com');
INSERT 0 1
prova=# SELECT * FROM customers;
 cid |      cname       |           cemail
-----+------------------+----------------------------
   1 | Francesco Sanges | francesco.sanges@gmail.com
(1 row)





CREATE TABLE with Key of type serial

CREATE TABLE orders(
oid SERIAL PRIMARY KEY,
oname VARCHAR(50) NOT NULL,
otype VARCHAR(50)
);

prova=# INSERT INTO orders VALUES (DEFAULT,'ordine1', 'tipo1');			#for SERIAL type insert DEFAULT as value



ALTER TABLE WITH CONSTRAINT
prova=# ALTER TABLE orders ADD COLUMN onumbers INTEGER CONSTRAINT positive_num_order CHECK (onumbers > 0);
PROVA CONSTRAINT:
prova=# INSERT INTO orders VALUES (DEFAULT, 'ordine2', 'tipo2', -5);
ERROR:  new row for relation "orders" violates check constraint "positive_num_order"
DETAIL:  Failing row contains (3, ordine2, tipo2, -5).

But u can put a null value:
prova=# INSERT INTO orders VALUES (DEFAULT, 'ordine2', 'tipo2');
INSERT 0 1




prova=# ALTER TABLE orders ADD COLUMN cid INTEGER;

ALTER TABLE orders ADD CONSTRAINT fk_customers FOREIGN KEY(cid) REFERENCES customers(cid);		#add constraint foreign key








LISTING TABLES
\d 
\d tablename


DROP TABLE
DROP TABLE tablename;





EXAMPLE CREATING DATABASE AND TABLES

CREATE DATABASE netmovies;
CREATE DATABASE
postgres=# \l
                                 List of databases
   Name    |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges
-----------+----------+----------+------------+------------+-----------------------
 netmovies | postgres | UTF8     | en_US.utf8 | en_US.utf8 |
 postgres  | postgres | UTF8     | en_US.utf8 | en_US.utf8 |
 prova     | postgres | UTF8     | en_US.utf8 | en_US.utf8 |
 template0 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
           |          |          |            |            | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
           |          |          |            |            | postgres=CTc/postgres
(5 rows)

postgres=# \c netmovies
You are now connected to database "netmovies" as user "postgres".




netmovies=# CREATE TABLE customers(
c_id SERIAL PRIMARY KEY,
c_name VARCHAR(50) NOT NULL
);
CREATE TABLE
netmovies=# \d
                 List of relations
 Schema |        Name        |   Type   |  Owner
--------+--------------------+----------+----------
 public | customers          | table    | postgres
 public | customers_c_id_seq | sequence | postgres
(2 rows)

netmovies=# INSERT INTO customers VALUES(DEFAULT, 'nome cognome 1');
INSERT 0 1
netmovies=# INSERT INTO customers VALUES(DEFAULT, 'nome cognome 2', (DEFAULT, 'nome cognome 3');
netmovies(# ^C
netmovies=# INSERT INTO customers VALUES(DEFAULT, 'nome cognome 2'), (DEFAULT, 'nome cognome 3');
INSERT 0 2
netmovies=# select * from customers;
 c_id |     c_name
------+----------------
    1 | nome cognome 1
    2 | nome cognome 2
    3 | nome cognome 3
(3 rows)


netmovies=# CREATE TABLE phone_numbers(
netmovies(# pn_id SERIAL PRIMARY KEY,
netmovies(# pn_num VARCHAR(20) UNIQUE NOT NULL,
netmovies(# pn_cid INT REFERENCES customers(c_id)
netmovies(# );
CREATE TABLE
netmovies=# \d phone_numbers
                                     Table "public.phone_numbers"
 Column |         Type          | Collation | Nullable |                   Default
--------+-----------------------+-----------+----------+----------------------------------------------
 pn_id  | integer               |           | not null | nextval('phone_numbers_pn_id_seq'::regclass)
 pn_num | character varying(20) |           | not null |
 pn_cid | integer               |           |          |
Indexes:
    "phone_numbers_pkey" PRIMARY KEY, btree (pn_id)
    "phone_numbers_pn_num_key" UNIQUE CONSTRAINT, btree (pn_num)
Foreign-key constraints:
    "phone_numbers_pn_cid_fkey" FOREIGN KEY (pn_cid) REFERENCES customers(c_id)






netmovies=# CREATE TABLE movies(
netmovies(# m_id SERIAL PRIMARY KEY,
netmovies(# m_name VARCHAR(50) NOT NULL,
netmovies(# m_cost MONEY NOT NULL CHECK (m_cost > 0::money)					:: in postgres is casting
netmovies(# );
CREATE TABLE


netmovies=# INSERT INTO movies VALUES (DEFAULT, 'film1', 3);
INSERT 0 1
netmovies=# INSERT INTO movies VALUES (DEFAULT, 'film1', -3);
ERROR:  new row for relation "movies" violates check constraint "movies_m_cost_check"
DETAIL:  Failing row contains (2, film1, -$3.00).
netmovies=#


